<tool id="neutrons_qclimax" name="QClimax" version="0.1.0"  profile="22.05">
  <description>analysis tool</description>
  <command>
	#import re
	#set $dataDir = str($resolutionFile)[0:str($resolutionFile).rfind("/") + 1]
	#set $resolutionName = os.path.basename(str($resolutionFile))

	##Move files to execution directory
	#set $resolutionName = str($resolutionName)[0:str($resolutionName).rfind(".")]
	#set $dataNames = [os.path.basename(str(i["dataFile"])) for i in list($dataFiles)]

	#set $iniName = re.sub('\W', '_', str($ini_file.element_identifier))
	mkdir functions ;
	mkdir input ;
	mkdir constraints ;
	mkdir output ;
	cp $ini_file ./input/$iniName ;
	cp $resolutionFile ./input/res.dat ;
	cp $ini_file $output ;
	#for $i in range(len(list($dataFiles)))
		#set $dataFile = str(list($dataFiles)[i]["dataFile"])
		#set $dataName = str(list($dataNames)[$i])
		cp $dataFile ./input/data"$i".dat ;
	#end for
	#for $c in $modelFunctions
		##Rename model functions as python files
		cp $c.modelFunction ./constraints/$c.modelFunction
	#end for 
	#for $c in $constraintFunctions
		##Rename constraint functions as python files
		cp $c.constraintFunction ./constraints/$c.constraintFunction
	#end for 
	#if $parameterInit.useParamInit == True
		#for $pif in $parameterInit.parameterInitFiles
			cp $pif.parameterInitFile ./input/ ;
		#end for
	#end if

	## Run the docker container
	bash -c 'docker run --rm --init -e INIFILE="$iniName" -v \$(pwd)/functions:/functions -v \$(pwd)/input:/input -v \$(pwd)/constraints:/constraints -v \$(pwd)/output:/output smithrw/qclimax' ;

	## Move output to job directory
	mv ./input/qclimax-docker-autogenerated-output ./ ;

	## Rename all json files because discover_datasets won't find both foo.txt and foo.json
	for f in ./qclimax-docker-autogenerated-output/*.json; do 
	    mv -- "\$f" "\${f%.json}_params.json" ;
	done ;

	</command>
  <inputs>
  	<param name="ini_file" type="data" format="txt" label="Ini File">
	</param>
	<param name="resolutionFile" type="data" format="dat,hdf5,inx" label="Resolution File">
	</param>
	<repeat name="dataFiles" title="Data Files">
		<param name="dataFile" type="data" format="dat,hdf5,inx" label="Data File">
		</param>
	</repeat>
	<repeat name="modelFunctions" title="Model Functions">
	    <param name="modelFunction" type="data" format="txt" label="Model Function">
	    </param>
	</repeat>
	<repeat name="constraintFunctions" title="Constraint Functions">
	    <param name="constraintFunction" type="data" format="txt" label="Constraint Function">
	    </param>
	</repeat>
	<conditional name="parameterInit">
		<param name="useParamInit" type="boolean" checked="false" label="Use Initialized Parameters" help="Whether to use a previous execution's output as starting values."> 
		</param>
		<when value="true">
			<repeat name="parameterInitFiles" title="Parameter Initialization Files" help="Must have one initialization file per data file">
				<param name="parameterInitFile" type="data" format="json" label="Parameter Initialization File" help="JSON file from a previous QClimax output.">
				</param>
			</repeat>
		</when>
	</conditional>

  </inputs>
  <outputs>
    <data format="csv" name="output" label="QClimax Ini file">
    </data>
	<collection name="output_files" type="list" label="QClimax Output Files">
	    <discover_datasets pattern="(?P&lt;designation&gt;.*)\.(?P&lt;ext&gt;[^\._]+)$" directory="qclimax-docker-autogenerated-output" />
	</collection>
  </outputs>


  <help>
Runs the QClimax code.
  </help>

</tool>
