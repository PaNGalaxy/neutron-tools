<tool id="ornl_qclimax" name="QClimax" version="0.0.0">
  <description>analysis tool</description>
<!--  <requirements>
    <container type="docker">smithrw/qclimax</container>
  </requirements>-->
  <command>
	<!--bash 'docker run -e INIFILE="$ini_file" -v $__tool_directory__/:/functions -v $__tool_directory__/:/input -v $__tool_directory__/:/constraints -v $__tool_directory__/:/output smithrw/qclimax' </command>-->
	#set $dataDir = str($resolutionFile)[0:str($resolutionFile).rfind("/") + 1]
	#set $resolutionName = os.path.basename(str($resolutionFile))

	##Move files to execution directory
	##cp $resolutionFile ./ ;
	#set $resolutionName = str($resolutionName)[0:str($resolutionName).rfind(".")]
	#set $dataNames = [os.path.basename(str(i["dataFile"])) for i in list($setTemperature.dataFiles)]
	##set $dataNames = [os.path.basename(str(list($setTemperature.dataFiles)[i]["dataFile"])) for i in range(len(list($runs)))]
	##set $dataName = os.path.basename(str(list($setTemperature.dataFiles)[0]["dataFile"]))
	##set $dataName = str($dataName)[0:str($dataName).rfind(".")]
	##set $iniName = os.path.basename(str($ini_file))

	##This assumes all ini names are exactly 11 characters long but basename isn't working on Calvera
	#set $iniName = $ini_file[-11:]
	##cp $ini_file "$dataDir""$iniName" ;
	##cp $ini_file ./ ;

	cp $ini_file $output ;

	mkdir functions ;
	mkdir input ;
	mkdir constraints ;
	mkdir output ;
	cp $ini_file ./input/ ;
	cp $resolutionFile ./input/ ;
	#for $i in range(len(list($setTemperature.dataFiles)))
		#set $dataFile = str(list($setTemperature.dataFiles)[i]["dataFile"])
		#set $dataName = str(list($dataNames)[$i])
		cp $dataFile ./input/ ;
	#end for
	#for $c in $constraintFunctions
		##Rename constraint functions as python files
		#set $constraintPython = os.path.basename(str($c.constraintFunction))[:-3] + "py"
		cp $c.constraintFunction ./constraints/$constraintPython
	#end for 
	#if $parameterInit.useParamInit == True
		#set $parameterInitName = os.path.basename(str($parameterInit.parameterInitFile))
		cp $parameterInit.parameterInitFile ./input/ ;
	#end if

	
	## Desktop execution only, switch docker container path to host mounted volume path
	##bash -c 'sudo docker run -e INIFILE="$iniName" -v /home$dataDir:/functions -v /home$dataDir:/input -v /home$dataDir:/constraints -v /home$dataDir:/output smithrw/qclimax' ;

	## Run the docker container
	bash -c 'docker run -e INIFILE="$iniName" -v \$(pwd)/functions:/functions -v \$(pwd)/input:/input -v \$(pwd)/constraints:/constraints -v \$(pwd)/output:/output smithrw/qclimax' ;
	##sudo chmod 777 "$dataDir"qclimax-docker-autogenerated-output 

	## Move output to job directory
	mv ./input/qclimax-docker-autogenerated-output ./ ;
	##mv -f "$dataDir"qclimax-docker-autogenerated-output/"$resolutionName"_Parameters_By_Temperature.pdf > $ParametersByTemperature ;
	##echo "$dataDir"qclimax-docker-autogenerated-output/"$resolutionName"_Parameters_By_Temperature.pdf $ParametersByTemperature ;

	## Rename all json files because discover_datasets won't find both foo.txt and foo.json
	for f in ./qclimax-docker-autogenerated-output/*.json; do 
	    mv -- "\$f" "\${f%.json}_params.json" ;
	done ;

	##cat "$dataDir"qclimax-docker-autogenerated-output/"$dataName"_0_.csv > $output ; 
	###for $i in range(len(list($dataNames)))
	##	#set $d = list($dataNames)[i]
	##	#set $d = str($d)[0:str($d).rfind(".")]
	##	#if $i == 0
	##		cat ./qclimax-docker-autogenerated-output/"$d"_0_.csv > $data0_0
	##	#end if
	##	#if $i == 1
	##		cat ./qclimax-docker-autogenerated-output/"$d"_0_.csv > $data1_0
	##	#end if
	###end for
	</command>
	<configfiles>
	    <configfile name="ini_file">
    
      -data-dir /input/
      #if $errorCalculationMethod != "none"
          -error-calculation ${errorCalculationMethod}
          -error-calculation-steps ${errorCalculationSteps}
          #if $forceErrorCalculation == True
              -force-error-calculation
          #end if
          #if $convolveBackground == True
              -convolve-background
          #end if
          #if $prefit == "single"
              -single-Q-prefit
          #end if
          #if $prefit == "center"
              -center-prefit
          #end if
          #if $plotLinear == True
              -plot-linear
          #end if
          #if $plotBackground == True
              -plot-background
          #end if
      #end if
      -select-qs 0,1,2,3,4,5,6,7,8
      -export-params
      #if(len(list($constraintParameters)) > 0) 
	      #set $constraintParams = ""
		  #for $c in $constraintParameters 
		      #set $constraintParams = $constraintParams + " " + str($c.constraintParameter.constraintParameterName) + ",value=" + str($c.constraintParameter.constraintParameterValue)
			  #if $c.constraintParameter.constraintParameterUseMin == True
			      #set $constraintParams = $constraintParams + ",min=" + str($c.constraintParameter.constraintParameterMin)
			  #end if
			  #if $c.constraintParameter.constraintParameterUseMax == True
			      #set $constraintParams = $constraintParams + ",min=" + str($c.constraintParameter.constraintParameterMax)
			  #end if
		  #end for
          -params $constraintParams
	  #end if
      #if $parameterInit.useParamInit == True
            #set $parameterIniName = str($parameterInit.parameterInitFile)[str($parameterInit.parameterInitFile).rfind("/") +1:]
            -initial-parameters /input/$parameterIniName
      #end if
      -method ${method}
      #if $setTemperature.setTemperature == True
          #for $d in $setTemperature.dataFiles
              #if $d.dataRangeCond.setDataRange == True
                  -restrict-range ${d.temperature} ${d.dataRangeCond.setDataRange.dataRangeStart} ${d.dataRangeCond.setDataRange.dataRangeEnd}
              #end if
          #end for
      #end if
      -instrument Instrument
      #set resolutionFileName = str($resolutionFile)[str($resolutionFile).rfind("/") +1:]
      -resolution ${resolutionFileName}
	  #set $dataFileNames = ""
      #for $d in $setTemperature.dataFiles
          #set $dataFileNames = $dataFileNames + str($d.dataFile)[str($d.dataFile).rfind("/") + 1:] + ","
      #end for
	  #set $dataFileNames = str($dataFileNames)[:-1]
	  -data ${dataFileNames}
      #for $f in $functions
          #if $f.function.name == "ColeCole"
              #set $vars = $f.function.alphaColeCole.alphaColeColeValue
              #if $f.function.alphaColeCole.alphaColeColeUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.alphaColeCole.alphaColeColeMax)
              #end if
              #if $f.function.alphaColeCole.alphaColeColeUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.alphaColeCole.alphaColeColeMin)
              #end if
              #set $vars = str($vars) + ":amp,value=" + str($f.function.ampColeCole.ampColeColeValue)
              #if $f.function.ampColeCole.ampColeColeUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.ampColeCole.ampColeColeMax)
              #end if
              #if $f.function.ampColeCole.ampColeColeUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.ampColeCole.ampColeColeMin)
              #end if
              #set $vars = str($vars) + ":cen,value=" + str($f.function.cenColeCole.cenColeColeValue)
              #if $f.function.cenColeCole.cenColeColeUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.cenColeCole.cenColeColeMax)
              #end if
              #if $f.function.cenColeCole.cenColeColeUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.cenColeCole.cenColeColeMin)
              #end if
              #set $vars = str($vars) + ":tau,value=" + str($f.function.tauColeCole.tauColeColeValue)
              #if $f.function.tauColeCole.tauColeColeUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.tauColeCole.tauColeColeMax)
              #end if
              #if $f.function.tauColeCole.tauColeColeUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.tauColeCole.tauColeColeMin)
              #end if
              -function ColeCole:alpha,value=#echo vars
          #end if
          #if $f.function.name == "Delta"
              #set $vars = $f.function.ampDelta.ampDeltaValue
              #if $f.function.ampDelta.ampDeltaUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.ampDelta.ampDeltaMax)
              #end if
              #if $f.function.ampDelta.ampDeltaUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.ampDelta.ampDeltaMin)
              #end if
              #set $vars = str($vars) + ":cen,value=" + str($f.function.cenDelta.cenDeltaValue)
              #if $f.function.cenDelta.cenDeltaUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.cenDelta.cenDeltaMax)
              #end if
              #if $f.function.cenDelta.cenDeltaUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.cenDelta.cenDeltaMin)
              #end if
              -function Delta:amp,value=#echo vars
          #end if
          #if $f.function.name == "FourierStetchedExponential"
              #set $vars = $f.function.ampFourierStetchedExponential.ampFourierStetchedExponentialValue
              #if $f.function.ampFourierStetchedExponential.ampFourierStetchedExponentialUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.ampFourierStetchedExponential.ampFourierStetchedExponentialMax)
              #end if
              #if $f.function.ampFourierStetchedExponential.ampFourierStetchedExponentialUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.ampFourierStetchedExponential.ampFourierStetchedExponentialMin)
              #end if
              #set $vars = str($vars) + ":beta,value=" + str($f.function.betaFourierStetchedExponential.betaFourierStetchedExponentialValue)
              #if $f.function.betaFourierStetchedExponential.betaFourierStetchedExponentialUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.betaFourierStetchedExponential.betaFourierStetchedExponentialMax)
              #end if
              #if $f.function.betaFourierStetchedExponential.betaFourierStetchedExponentialUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.betaFourierStetchedExponential.betaFourierStetchedExponentialMin)
              #end if
              #set $vars = str($vars) + ":cen,value=" + str($f.function.cenFourierStetchedExponential.cenFourierStetchedExponentialValue)
              #if $f.function.cenFourierStetchedExponential.cenFourierStetchedExponentialUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.cenFourierStetchedExponential.cenFourierStetchedExponentialMax)
              #end if
              #if $f.function.cenFourierStetchedExponential.cenFourierStetchedExponentialUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.cenFourierStetchedExponential.cenFourierStetchedExponentialMin)
              #end if
              #set $vars = str($vars) + ":tau,value=" + str($f.function.tauFourierStetchedExponential.tauourierStetchedExponentialValue)
              #if $f.function.tauFourierStetchedExponential.tauFourierStetchedExponentialUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.tauFourierStetchedExponential.tauFourierStetchedExponentialMax)
              #end if
              #if $f.function.tauFourierStetchedExponential.tauFourierStetchedExponentialUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.tauFourierStetchedExponential.tauFourierStetchedExponentialMin)
              #end if
              -function FourierStetchedExponential:amp,value=#echo vars
          #end if
          #if $f.function.name == "Linear"
              #set $vars = $f.function.interceptLinear.interceptLinearValue
              #if $f.function.interceptLinear.interceptLinearUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.interceptLinear.interceptLinearMax)
              #end if
              #if $f.function.interceptLinear.interceptLinearUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.interceptLinear.interceptLinearMin)
              #end if
              #set $vars = str($vars) + ":slope,value=" + str($f.function.slopeLinear.slopeLinearValue)
              #if $f.function.slopeLinear.slopeLinearUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.slopeLinear.slopeLinearMax)
              #end if
              #if $f.function.slopeLinear.slopeLinearUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.slopeLinear.slopeLinearMin)
              #end if
              -function Linear:intercept,value=#echo vars
          #end if
          #if $f.function.name == "Lorentz"
              #set $vars = $f.function.ampLorentz.ampLorentzValue
              #if $f.function.ampLorentz.ampLorentzUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.ampLorentz.ampLorentzMax)
              #end if
              #if $f.function.ampLorentz.ampLorentzUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.ampLorentz.ampLorentzMin)
              #end if
              #set $vars = str($vars) + ":cen,value=" + str($f.function.cenLorentz.cenLorentzValue)
              #if $f.function.cenLorentz.cenLorentzUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.cenLorentz.cenLorentzMax)
              #end if
              #if $f.function.cenLorentz.cenLorentzUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.cenLorentz.cenLorentzMin)
              #end if
              #set $vars = str($vars) + ":wid,value=" + str($f.function.widLorentz.widLorentzValue)
              #if $f.function.widLorentz.widLorentzUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.widLorentz.widLorentzMax)
              #end if
              #if $f.function.widLorentz.widLorentzUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.widLorentz.widLorentzMin)
              #end if
              -function Lorentz:amp,value=#echo vars
          #end if
          #if $f.function.name == "PlaneDiffusion"
              #set $vars = $f.function.ampPlaneDiffusion.ampPlaneDiffusionValue
              #if $f.function.ampPlaneDiffusion.ampPlaneDiffusionUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.ampPlaneDiffusion.ampPlaneDiffusionMax)
              #end if
              #if $f.function.ampPlaneDiffusion.ampPlaneDiffusionUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.ampPlaneDiffusion.ampPlaneDiffusionMin)
              #end if
              #set $vars = str($vars) + ":cen,value=" + str($f.function.cenPlaneDiffusion.cenPlaneDiffusionValue)
              #if $f.function.cenPlaneDiffusion.cenPlaneDiffusionUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.cenPlaneDiffusion.cenPlaneDiffusionMax)
              #end if
              #if $f.function.cenPlaneDiffusion.cenPlaneDiffusionUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.cenPlaneDiffusion.cenPlaneDiffusionMin)
              #end if
              #set $vars = str($vars) + ":wid,value=" + str($f.function.widPlaneDiffusion.widPlaneDiffusionValue)
              #if $f.function.widPlaneDiffusion.widPlaneDiffusionUseMax 
                    #set $vars = str($vars) + ",max=" + str($f.function.widPlaneDiffusion.widPlaneDiffusionMax)
              #end if
              #if $f.function.widPlaneDiffusion.widPlaneDiffusionUseMin 
                    #set $vars = str($vars) + ",min=" + str($f.function.widPlaneDiffusion.widPlaneDiffusionMin)
              #end if
              -function PlaneDiffusion:amp,value=#echo vars
          #end if
      #end for
      ##If there's no constraints in any runs, Galaxy doesn't create an empty list for the empty runs, so just put it in manually
      #if len($runs) == 0
          -run
		  #if $orderLorentzians == True
		      -ordered Lorentz
		  #end if 
      #end if
      #for $r in $runs
          -run
          #for $c in $r.constraints
              #if $c.constraintRelax.relax
                    #if $c.constraintRelax.rattle
                          -relax-and-rattle ${c.constrainedParameter} ${c.constraintRelax.relaxationPercent}
                    #else
                          -relax ${c.constrainedParameter} ${c.constraintRelax.relaxationPercent}
                    #end if
              #else
                    -constraint ${c.constrainedParameter} ${c.constraint}
              #end if
          #end for
          #if $orderLorentzians == True
		      -ordered Lorentz
		  #end if 
      #end for

<!--     
#if $f.alphaColeCole.alphaColeColeUseMax then set $def = "true" else set $def = "false"
$f.alphaColeCole.alphaColeColeValue
{#if f.alphaColeCole.alphaColeColeUseMax then ,max=$f.alphaColeCole.alphaColeColeMax}:alpha,value=$f.alphaColeCole.alphaColeColeValue{#if f.alphaColeCole.alphaColeColeUseMin then ,min=$f.alphaColeCole.alphaColeColeMin}{#if f.alphaColeCole.alphaColeColeUseMax then ,max=$f.alphaColeCole.alphaColeColeMax}
 $x = "test"
          value = ${x}
		#if $errorCalculationMethod != none
              		-error-calculation "${errorCalculationMethod}"
			-error-calculation-steps "${errorCalculationSteps}"
			#if $forceErrorCalculation == true
				-force-error-calculation
		#if $convolveBackground == true
              		-convolve-background
		#if $prefit == single
			-single-Q-prefit
		#if $prefit == center
			-center-prefit
		#if $plotLinear == true
              		-plot-linear
		#if $plotBackground == true
              		-plot-background
		-select-qs 0,1,2,3,4,5,6,7,8
		-export-params
		-method "${method}"
		#if $setTemperature.setTemperature == true:
			#for $d in $setTemperature.dataFiles
				#if $d.setDataRange.dataRange == true
					-restrict-range "${d.temperature}" "${d.setDataRange.dataRangeStart}" "${d.setDataRange.dataRangeEnd}"
		-instrument Instrument
		-resolution "${resolutionFile}"

		#for $d in $setTemperature.dataFiles
			-data "${d.dataFile}"
		#for $f in $functions-->

	    </configfile>
	</configfiles>
  <inputs>
    <!--<param name="dataFile" type="data" format="???" label="Data File" help="The data file" />
	<param label="Task" name="TaskOption" type="text" value="0">
		<option value="0">Powder calculation with incoherent approximation</option>
		<option value="1">Full powder calculation including the coherent effect</option>
		<option value="2">Single crystal Q-w calculation</option>
		<option value="3">Single crystal Q-Q calculation</option>
	</param>-->
	<param name="resolutionFile" type="data" format="dat,hdf5,inx" label="Resolution File">
	</param>
	<conditional name="setTemperature">
		<param name="setTemperature" type="boolean" checked="false" label="Set Temperature" help="Whether to specify a temperature for the data files."> 
		</param>
		<when value="false">
			<repeat name="dataFiles" title="Data Files">
				<param name="dataFile" type="data" format="dat,hdf5,inx" label="Data File">
				</param>
			</repeat>
		</when>
		<when value="true">
			<repeat name="dataFiles" title="Data Files">
				<param name="dataFile" type="data" format="dat,hdf5,inx" label="Data File">
				</param>
				<param name="temperature" type="float" value="0" label="Temperature" help="The file's temperature in degrees"> 
				</param>
				<conditional name="dataRangeCond">
					<param name="setDataRange" type="boolean" checked="false" label="Limit Data Range"> 
					</param>
					<when value="true">
						<param name="dataRangeStart" type="float" value="0" label="Start"> 
						</param>
						<param name="dataRangeEnd" type="float" value="0" label="End"> 
						</param>
					</when>
				</conditional>
			</repeat>
		</when>
	</conditional>
	<repeat name="functions" title="Functions">
		<conditional name="function">
			<param name="name" type="select" optional="false" value="ColeCole" label="Method" help="Which calculation to perform">
				<option value="ColeCole">ColeCole</option>
				<option value="Delta">Delta</option>
				<option value="FourierStetchedExponential">Fourier Stetched Exponential</option>
				<option value="Linear">Linear</option>
				<option value="Lorentz">Lorentzian</option>
				<option value="PlaneDiffusion">Plane Diffusion</option>
			</param>
			<when value="ColeCole">
				<section name="alphaColeCole" help="Alpha parameter" title="Alpha">
					<param name="alphaColeColeValue" type="float" value="0.5" label="Starting Value"> 
					</param>
					<param name="alphaColeColeUseMin" type="boolean" checked="true" label="Set min"> 
					</param>
					<param name="alphaColeColeMin" type="float" value="0.00005" label="Min"> 
					</param>
					<param name="alphaColeColeUseMax" type="boolean" checked="true" label="Set max"> 
					</param>
					<param name="alphaColeColeMax" type="float" value="1" label="Max"> 
					</param>
				</section>	
				<section name="ampColeCole" help="Amplitude parameter" title="Amplitude">
					<param name="ampColeColeValue" type="float" value="1" label="Starting Value"> 
					</param>
					<param name="ampColeColeUseMin" type="boolean" checked="true" label="Set min"> 
					</param>
					<param name="ampColeColeMin" type="float" value="0" label="Min"> 
					</param>
					<param name="ampColeColeUseMax" type="boolean" checked="false" label="Set max"> 
					</param>
					<param name="ampColeColeMax" type="float" value="1" label="Max"> 
					</param>
				</section>	
				<section name="cenColeCole" help="Center parameter" title="Center">
					<param name="cenColeColeValue" type="float" value="0.0001" label="Starting Value"> 
					</param>
					<param name="cenColeColeUseMin" type="boolean" checked="true" label="Set min"> 
					</param>
					<param name="cenColeColeMin" type="float" value="-100" label="Min"> 
					</param>
					<param name="cenColeColeUseMax" type="boolean" checked="true" label="Set max"> 
					</param>
					<param name="cenColeColeMax" type="float" value="100" label="Max"> 
					</param>
				</section>	
				<section name="tauColeCole" help="Tau parameter" title="Tau">
					<param name="tauColeColeValue" type="float" value="0.5" label="Starting Value"> 
					</param>
					<param name="tauColeColeUseMin" type="boolean" checked="true" label="Set min"> 
					</param>
					<param name="tauColeColeMin" type="float" value="0.0025" label="Min"> 
					</param>
					<param name="tauColeColeUseMax" type="boolean" checked="false" label="Set max"> 
					</param>
					<param name="tauColeColeMax" type="float" value="1" label="Max"> 
					</param>
				</section>	
			</when>
			<when value="Delta">
				<section name="ampDelta" help="Amplitude parameter" title="Amplitude">
					<param name="ampDeltaValue" type="float" value="1" label="Starting Value"> 
					</param>
					<param name="ampDeltaUseMin" type="boolean" checked="true" label="Set min"> 
					</param>
					<param name="ampDeltaMin" type="float" value="0" label="Min"> 
					</param>
					<param name="ampDeltaUseMax" type="boolean" checked="false" label="Set max"> 
					</param>
					<param name="ampDeltaMax" type="float" value="1" label="Max"> 
					</param>
				</section>
				<section name="cenDelta" help="Center parameter" title="Center">
					<param name="cenDeltaValue" type="float" value="1" label="Starting Value"> 
					</param>
					<param name="cenDeltaUseMin" type="boolean" checked="true" label="Set min"> 
					</param>
					<param name="cenDeltaMin" type="float" value="-3900" label="Min"> 
					</param>
					<param name="cenDeltaUseMax" type="boolean" checked="true" label="Set max"> 
					</param>
					<param name="cenDeltaMax" type="float" value="3900" label="Max"> 
					</param>
				</section>	
			</when>
			<when value="FourierStetchedExponential">
				<section name="ampFourierStetchedExponential" help="Amplitude parameter" title="Amplitude">
					<param name="ampFourierStetchedExponentialValue" type="float" value="1" label="Starting Value"> 
					</param>
					<param name="ampFourierStetchedExponentialUseMin" type="boolean" checked="false" label="Set min"> 
					</param>
					<param name="ampFourierStetchedExponentialMin" type="float" value="0" label="Min"> 
					</param>
					<param name="ampFourierStetchedExponentialUseMax" type="boolean" checked="true" label="Set max"> 
					</param>
					<param name="ampFourierStetchedExponentialMax" type="float" value="1" label="Max"> 
					</param>
				</section>
				<section name="betaFourierStetchedExponential" help="Beta parameter" title="Beta">
					<param name="betaFourierStetchedExponentialValue" type="float" value="1" label="Starting Value"> 
					</param>
					<param name="betaFourierStetchedExponentialUseMin" type="boolean" checked="false" label="Set min"> 
					</param>
					<param name="betaFourierStetchedExponentialMin" type="float" value="0" label="Min"> 
					</param>
					<param name="betaFourierStetchedExponentialUseMax" type="boolean" checked="true" label="Set max"> 
					</param>
					<param name="betaFourierStetchedExponentialMax" type="float" value="1" label="Max"> 
					</param>
				</section>
				<section name="cenFourierStetchedExponential" help="Center parameter" title="Center">
					<param name="cenFourierStetchedExponentialValue" type="float" value="0" label="Starting Value"> 
					</param>
					<param name="cenFourierStetchedExponentialUseMin" type="boolean" checked="false" label="Set min"> 
					</param>
					<param name="cenFourierStetchedExponentialMin" type="float" value="0" label="Min"> 
					</param>
					<param name="cenFourierStetchedExponentialUseMax" type="boolean" checked="true" label="Set max"> 
					</param>
					<param name="cenFourierStetchedExponentialMax" type="float" value="1" label="Max"> 
					</param>
				</section>
				<section name="tauFourierStetchedExponential" help="Tau parameter" title="Tau">
					<param name="tauFourierStetchedExponentialValue" type="float" value="1" label="Starting Value"> 
					</param>
					<param name="tauFourierStetchedExponentialUseMin" type="boolean" checked="false" label="Set min"> 
					</param>
					<param name="tauFourierStetchedExponentialMin" type="float" value="0" label="Min"> 
					</param>
					<param name="tauFourierStetchedExponentialUseMax" type="boolean" checked="true" label="Set max"> 
					</param>
					<param name="tauFourierStetchedExponentialMax" type="float" value="1" label="Max"> 
					</param>
				</section>
			</when>
			<when value="Linear">
				<section name="interceptLinear" help="Intercept parameter" title="Intercept">
					<param name="interceptLinearValue" type="float" value="0.00000001" label="Starting Value"> 
					</param>
					<param name="interceptLinearUseMin" type="boolean" checked="false" label="Set min"> 
					</param>
					<param name="interceptLinearMin" type="float" value="0" label="Min"> 
					</param>
					<param name="interceptLinearUseMax" type="boolean" checked="false" label="Set max"> 
					</param>
					<param name="interceptLinearMax" type="float" value="1" label="Max"> 
					</param>
				</section>
				<section name="slopeLinear" help="Slope parameter" title="Slope">
					<param name="slopeLinearValue" type="float" value="0.00000001" label="Starting Value"> 
					</param>
					<param name="slopeLinearUseMin" type="boolean" checked="false" label="Set min"> 
					</param>
					<param name="slopeLinearMin" type="float" value="0" label="Min"> 
					</param>
					<param name="slopeLinearUseMax" type="boolean" checked="false" label="Set max"> 
					</param>
					<param name="slopeLinearMax" type="float" value="1" label="Max"> 
					</param>
				</section>
			</when>
			<when value="Lorentz">
				<section name="ampLorentz" help="Amplitude parameter" title="Amplitude">
					<param name="ampLorentzValue" type="float" value="1" label="Starting Value"> 
					</param>
					<param name="ampLorentzUseMin" type="boolean" checked="true" label="Set min"> 
					</param>
					<param name="ampLorentzMin" type="float" value="0" label="Min"> 
					</param>
					<param name="ampLorentzUseMax" type="boolean" checked="false" label="Set max"> 
					</param>
					<param name="ampLorentzMax" type="float" value="1" label="Max"> 
					</param>
				</section>
				<section name="cenLorentz" help="Center parameter" title="Center">
					<param name="cenLorentzValue" type="float" value="0.0001" label="Starting Value"> 
					</param>
					<param name="cenLorentzUseMin" type="boolean" checked="true" label="Set min"> 
					</param>
					<param name="cenLorentzMin" type="float" value="-100" label="Min"> 
					</param>
					<param name="cenLorentzUseMax" type="boolean" checked="true" label="Set max"> 
					</param>
					<param name="cenLorentzMax" type="float" value="100" label="Max"> 
					</param>
				</section>
				<section name="widLorentz" help="Half-width half-max parameter" title="Width">
					<param name="widLorentzValue" type="float" value="0.5" label="Starting Value"> 
					</param>
					<param name="widLorentzUseMin" type="boolean" checked="true" label="Set min"> 
					</param>
					<param name="widLorentzMin" type="float" value="0.025" label="Min"> 
					</param>
					<param name="widLorentzUseMax" type="boolean" checked="false" label="Set max"> 
					</param>
					<param name="widLorentzMax" type="float" value="1" label="Max"> 
					</param>
				</section>
			</when>
			<when value="PlaneDiffusion">
				<section name="ampPlaneDiffusion" help="Amplitude parameter" title="Amplitude">
					<param name="ampPlaneDiffusionValue" type="float" value="1" label="Starting Value"> 
					</param>
					<param name="ampPlaneDiffusionUseMin" type="boolean" checked="true" label="Set min"> 
					</param>
					<param name="ampPlaneDiffusionMin" type="float" value="0" label="Min"> 
					</param>
					<param name="ampPlaneDiffusionUseMax" type="boolean" checked="false" label="Set max"> 
					</param>
					<param name="ampPlaneDiffusionMax" type="float" value="1" label="Max"> 
					</param>
				</section>
				<section name="cenPlaneDiffusion" help="Center parameter" title="Center">
					<param name="cenPlaneDiffusionValue" type="float" value="0.0001" label="Starting Value"> 
					</param>
					<param name="cenPlaneDiffusionUseMin" type="boolean" checked="true" label="Set min"> 
					</param>
					<param name="cenPlaneDiffusionMin" type="float" value="-100" label="Min"> 
					</param>
					<param name="cenPlaneDiffusionUseMax" type="boolean" checked="true" label="Set max"> 
					</param>
					<param name="cenPlaneDiffusionMax" type="float" value="100" label="Max"> 
					</param>
				</section>
				<section name="widPlaneDiffusion" help="Width parameter" title="Width">
					<param name="widPlaneDiffusionValue" type="float" value="0.5" label="Starting Value"> 
					</param>
					<param name="widPlaneDiffusionUseMin" type="boolean" checked="true" label="Set min"> 
					</param>
					<param name="widPlaneDiffusionMin" type="float" value="0.025" label="Min"> 
					</param>
					<param name="widPlaneDiffusionUseMax" type="boolean" checked="false" label="Set max"> 
					</param>
					<param name="widPlaneDiffusionMax" type="float" value="1" label="Max"> 
					</param>
				</section>
			</when>
		</conditional>
	</repeat>
	<repeat name="constraintParameters" title="Constraint Parameters">
		<section name="constraintParameter" help="Parameter for use in defining constraints" title="Parameter">
			<param name="constraintParameterName" type="text" value="A" label="Name"> 
			</param>
			<param name="constraintParameterValue" type="float" value="0.5" label="Starting Value"> 
			</param>
			<param name="constraintParameterUseMin" type="boolean" checked="false" label="Set min"> 
			</param>
			<param name="constraintParameterMin" type="float" value="0" label="Min"> 
			</param>
			<param name="constraintParameterUseMax" type="boolean" checked="false" label="Set max"> 
			</param>
			<param name="constraintParameterMax" type="float" value="1" label="Max"> 
			</param>
		</section>	
	</repeat>
	<repeat name="constraintFunctions" title="Constraint Functions">
	    <param name="constraintFunction" type="data" format="txt" label="Constraint Function">
	    </param>
	</repeat>
	<repeat name="runs" title="Runs">
		<repeat name="constraints" title="Constraints">
			<param name="constrainedParameter" type="text" label="Constrained Parameter" help="The parameter to constrain">
	    		</param>
	    		<param name="constraint" type="text" label="Constraint" help="(give link to public QClimax documentation)">
	    		</param>
			<conditional name="constraintRelax">
				<param name="relax" type="boolean" checked="false" label="Relax Constraint" help="Relax the constraint from the previous run."> 
				</param>
				<when value="true">
					<param name="relaxationPercent" type="integer" value="0" label="Relaxation %" help="The percent around the constrained value in which the parameter can vary"> 
					</param>
					<param name="rattle" type="boolean" checked="false" label="Rattle Constraint" help="Force the variable to vary within the relaxed constraint"> 
					</param>
				</when>
			</conditional>
		</repeat>
	</repeat>
	<param name="runName" type="text" label="Name" help="Name for the output files">
	</param>
	<param name="method" type="select" optional="false" value="leastsq" label="Method" help="Which calculation to perform">
				<option value="leastsq">Levenberg-Marquadt</option>
				<option value="least_squares">Least-Squares (Trust Region Reflective)</option>
				<option value="nelder">Nelder-Mead</option>
				<option value="lbfgsb">L-BFGS-B</option>
				<option value="powell">Powell</option>
				<option value="coblya">Coblya</option>
				<option value="tnc">Truncate Newton</option>
				<option value="slsqp">Sequential Linear Squares Programming</option>
	</param>
	<param name="errorCalculationMethod" type="select" optional="false" value="none" label="Error Calculation Algorithm" help="Which error calculation algorithm to use">
				<option value="none">None</option>
				<option value="average">Average</option>
				<option value="markov">Markov Chain Monte Carlo</option>
				<option value="monotonic">Monotonic</option>
				<option value="monotonic-average">Monotonic Average</option>
	</param>
	<param name="orderLorentzians" type="boolean" checked="false" label="Order Lorentzians" help="Whether to force the Lorentzians to maintain the same amplitude ordering across Q values"> 
	</param>
	<param name="errorCalculationSteps" type="float" value="10" label="# of Error Calculation Steps"> 
	</param>
	<param name="epsilon" type="float" value="0" label="Epsilon" help="Epsilon value for average error calculation types"> 
	</param>
	<param name="forceErrorCalculation" type="boolean" checked="false" label="Force Error Calculation"> 
	</param>
	<param name="convolveBackground" type="boolean" checked="false" label="Convolve Background"> 
	</param>
	<param name="prefit" type="select" optional="false" value="none" label="Prefit" help="Which prefit algorithm to perform">
				<option value="none">None</option>
				<option value="single">Single Q</option>
				<option value="center">Center</option>
	</param>
	<param name="linearPlot" type="boolean" checked="false" label="Linear Plot"> 
	</param>
	<param name="plotBackground" type="boolean" checked="false" label="Plot Background"> 
	</param>
	<conditional name="parameterInit">
		<param name="useParamInit" type="boolean" checked="false" label="Use Initialized Parameters" help="Whether to use a previous execution's output as starting values."> 
		</param>
		<when value="true">
			<param name="parameterInitFile" type="data" format="json" label="Parameter Initialization File" help="JSON file from a previous QClimax output.">
			</param>
		</when>
	</conditional>
  </inputs>
  <outputs>
    <data format="csv" name="output">
    </data>
	<!--<data format="csv" name="data0_0" >
	</data>
	<data format="csv" name="data1_0" >
		<filter>len(setTemperatures.dataFiles) > 1
		</filter>
	</data>-->
	<collection name="output_files" type="list" label="Output Files">
	    <discover_datasets pattern="(?P&lt;designation&gt;.*)\.(?P&lt;ext&gt;[^\._]+)$" directory="qclimax-docker-autogenerated-output" />
	</collection>
	<!--<collection format="json" name="json" type="list" label="TJSON">
	    <discover_datasets pattern="__designation__" directory="qclimax-docker-autogenerated-output" />
	</collection>-->
	<!--<data format="csv" name="data2-0" >
	</data>
	<data format="csv" name="data3-0" >
	</data>
	<data format="csv" name="data4-0" >
	</data>-->
    <!--<data name="results">
      <discover_datasets directory="qclimax-docker-autogenerated-output" pattern="*" visible="true" />
    </data>-->
	<!--<data format="pdf" label="ParametersByTemperature" name="ParametersByTemperature"/>-->
	
  </outputs>



  <!--<tests>
    <test>
      <param name="input" value="fa_gc_content_input.fa"/>
      <output name="out_file1" file="fa_gc_content_output.txt"/>
    </test>
  </tests>
 -->

  <help>
Runs the OClimax code.
  </help>

</tool>
